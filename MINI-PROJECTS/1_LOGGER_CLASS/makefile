# Simple Makefile for a single-directory C++ project

# Compiler and compiler flags
CXX := g++
CXXFLAGS := -std=c++17 -Wall -Wextra -O2 -g -MMD -MP

# Linker flags. Use -pthread for modern C++ thread support with GCC/Clang.
LDFLAGS := -pthread

# Name of the final executable
TARGET := logger

# Automatically find all .cpp files in the current directory
SRC := $(wildcard *.cpp)
# Generate corresponding .o (object) and .d (dependency) file names
OBJ := $(SRC:.cpp=.o)
DEPS := $(OBJ:.o=.d)

# Phony targets do not correspond to actual files
.PHONY: all clean run

# The default target when you just type "make"
all: $(TARGET)

# Rule to link the object files into the final executable
$(TARGET): $(OBJ)
	$(CXX) $(LDFLAGS) -o $@ $^

# Include the dependency files generated by the compiler.
# The hyphen before 'include' tells make to ignore errors if the files don't exist.
-include $(DEPS)

# Rule to compile a .cpp source file into a .o object file
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Removes the executable, object files, and dependency files
clean:
	rm -f $(TARGET) $(OBJ) $(DEPS)

# A convenience target to build and run the application
run: $(TARGET)
	./$(TARGET)
